name: CI

env:
  QT_VERSION:     "5.13.0"
  QT_CREATOR_VERSION: 4.11.0
  MINGW_VERSION:  "win64_mingw73"
  MINGW_PATH:     "mingw73_64"
  PLUGIN_PRO: CocktailCalc.pro
  PLUGIN_NAME: CocktailCalc
  
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - {
            name: "Windows Latest x64",
            artifact: "Windows-x64.zip",
            os: windows-latest,
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
        - {
            name: "Linux Latest x64",
            artifact: "Linux-x64.zip",
            os: ubuntu-latest
          }

    steps:
      - name: Print working directory on runner
        run: echo "${GITHUB_WORKSPACE}"

      - uses: actions/checkout@v2
      
      - name: Installing system libs
        shell: cmake -P {0}
        run: |
          if ("${{ runner.os }}" STREQUAL "Linux")
            execute_process(
              COMMAND sudo apt install libgl1-mesa-dev
            )
          endif()

      - name: Download Qt
        id: qt
        shell: cmake -P {0}
        run: |
          set(qt_version $ENV{QT_VERSION})
          string(REPLACE "." "" qt_version_dotless "${qt_version}")
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(url_os "windows_x86")
            if ("${{ matrix.config.environment_script }}" MATCHES "vcvars64.bat")
              set(qt_package_name "qt.qt5.${qt_version_dotless}.win64_msvc2017_64")
              set(qt_dir_prefix "${qt_version}/msvc2017_64")
            elseif ("${{ matrix.config.environment_script }}" MATCHES "vcvars32.bat")
              set(qt_package_name "qt.qt5.${qt_version_dotless}.win32_msvc2017")
              set(qt_dir_prefix "${qt_version}/msvc2017")
            else()
            endif()
          elseif ("${{ runner.os }}" STREQUAL "Linux")
            set(url_os "linux_x64")
            set(qt_package_name "qt.qt5.${qt_version_dotless}.gcc_64")
            set(qt_dir_prefix "${qt_version}/gcc_64")
          elseif ("${{ runner.os }}" STREQUAL "macOS")
            set(url_os "mac_x64")
            set(qt_package_name "qt.qt5.${qt_version_dotless}.clang_64")
            set(qt_dir_prefix "${qt_version}/clang_64")
          endif()
          set(qt_base_url "https://download.qt.io/online/qtsdkrepository/${url_os}/desktop/qt5_${qt_version_dotless}")
          file(DOWNLOAD "${qt_base_url}/Updates.xml" ./Updates.xml SHOW_PROGRESS)
          file(READ ./Updates.xml updates_xml)
          string(REGEX MATCH "<Name>${qt_package_name}.*<Version>([0-9+-.]+)</Version>.*<DownloadableArchives>qtbase([a-zA-Z0-9_-]+).7z"
            updates_xml_output "${updates_xml}")
          set(package_version ${CMAKE_MATCH_1})
          set(package_suffix ${CMAKE_MATCH_2})
          string(REPLACE "-debug-symbols" "" package_suffix "${package_suffix}")
          # Workaround for CMake's greedy regex
          if ("${{ matrix.config.environment_script }}" MATCHES "vcvars32.bat")
            string(REPLACE "X86_64" "X86" package_suffix "${package_suffix}")
          endif()
          file(MAKE_DIRECTORY qt5)
          # Save the path for other steps
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/qt5/${qt_dir_prefix}" qt_dir)
          message("::set-output name=qt_dir::${qt_dir}")
          foreach(package qtbase qtdeclarative qttools qtsvg)
            file(DOWNLOAD
              "${qt_base_url}/${qt_package_name}/${package_version}${package}${package_suffix}.7z" ./${package}.7z
              SHOW_PROGRESS
            )
            execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../${package}.7z WORKING_DIRECTORY qt5)
          endforeach()
          file(READ "qt5/${qt_dir_prefix}/mkspecs/qconfig.pri" qtconfig)
          string(REPLACE "Enterprise" "OpenSource" qtconfig "${qtconfig}")
          string(REPLACE "licheck.exe" "" qtconfig "${qtconfig}")
          string(REPLACE "licheck64" "" qtconfig "${qtconfig}")
          string(REPLACE "licheck_mac" "" qtconfig "${qtconfig}")
          file(WRITE "qt5/${qt_dir_prefix}/mkspecs/qconfig.pri" "${qtconfig}")
      
      - name: Set path and refresh
        run: |
          echo "d:/a/CocktailCalc/Qt/${{ env.QT_VERSION }}/${{ env.MINGW_PATH }}/bin" >> $GITHUB_PATH

      - name: Prepend path
        run: |
          echo "d:/a/CocktailCalc/Qt/${{ env.QT_VERSION }}/mingw73_32/bin" >> $GITHUB_PATH
  
      - name: Qmake and make
        run: | 
          qmake.exe CocktailCalc.pro -spec win32-g++ "CONFIG+=release" #"LIBS += D:\a\CocktailCalc\Qt\5.12.7\mingw73_32\lib\libQt5Cored.a"
          mingw32-make.exe qmake_all

      - name: Build
        shell: cmake -P {0}
        run: |
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(ENV{PATH} "${{ steps.qt.outputs.qt_dir }}/bin/;$ENV{PATH}")
          else()
            set(ENV{PATH} "${{ steps.qt.outputs.qt_dir }}/bin/:$ENV{PATH}")
            set(ENV{LD_LIBRARY_PATH} "qtcreator/lib/Qt/lib:$ENV{LD_LIBRARY_PATH}")
          endif()
          include(ProcessorCount)
          ProcessorCount(N)
          set(make_program make -j ${N})
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(make_program "qtcreator/bin/jom")
          endif()
          execute_process(
            COMMAND ${make_program}
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/$ENV{PLUGIN_NAME}-$ENV{QT_CREATOR_VERSION}-${{ matrix.config.artifact }}" artifact)
          execute_process(COMMAND
            ${CMAKE_COMMAND} -E tar cvf ${artifact} --format=zip "${{ steps.qt_creator.outputs.qtc_binary_name }}"
            WORKING_DIRECTORY "${{ steps.qt_creator.outputs.qtc_output_directory }}"
          )
      
      - name: prepare release
        run: |
          cp D:/a/CocktailCalc/Qt/${{ env.QT_VERSION }}/${{ env.MINGW_PATH }}/bin/QT5Core.dll ${{ env.PLUGIN_NAME}}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}
          cp D:/a/CocktailCalc/Qt/${{ env.QT_VERSION }}/${{ env.MINGW_PATH }}/bin/QT5Gui.dll ${{ env.PLUGIN_NAME}}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}
          cp D:/a/CocktailCalc/Qt/${{ env.QT_VERSION }}/${{ env.MINGW_PATH }}/bin/Qt5Network.dll ${{ env.PLUGIN_NAME}}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}
          cp D:/a/CocktailCalc/Qt/${{ env.QT_VERSION }}/${{ env.MINGW_PATH }}/bin/Qt5Widgets.dll ${{ env.PLUGIN_NAME}}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}
          rm ${{ env.PLUGIN_NAME}}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}e/*.so
          rm ${{ env.PLUGIN_NAME}}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}/*.h 
          rm ${{ env.PLUGIN_NAME}}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}/*.cpp 

      - name: upload artifact release
        uses: actions/upload-artifact@v3
        with:
          path: ./${{ env.PLUGIN_NAME }}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}
          name: ${{ env.PLUGIN_NAME}}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}
